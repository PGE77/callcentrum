{"version":3,"sources":["logo.svg","FetchData.js","App.js","reportWebVitals.js","index.js"],"names":["FetchData","data","setData","useState","loading","setLoading","error","setError","count","setCount","useEffect","async","response","fetch","method","headers","Authorization","concat","mode","ok","Error","status","result","json","items","forEach","item","dialer_agent_id","message","fetchData","_jsx","children","_jsxs","JSON","stringify","App","className","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"yMAAe,I,YC8DAA,MA3DGA,KAChB,MAAOC,EAAMC,GAAWC,mBAAS,OAC1BC,EAASC,GAAcF,oBAAS,IAChCG,EAAOC,GAAYJ,mBAAS,OAC5BK,EAAOC,GAAYN,mBAAS,GA2CnC,OAzCAO,qBAAU,KACUC,WAKhB,IACE,MAAMC,QAAiBC,MAJvB,uKAI0C,CACxCC,OAAQ,MACRC,QAAS,CACPC,cAAc,UAADC,OANL,kDAOR,eAAgB,oBAElBC,KAAM,SAGR,IAAKN,EAASO,GACZ,MAAM,IAAIC,MAAM,uBAADH,OAAwBL,EAASS,SAGlD,MAAMC,QAAeV,EAASW,OAC9BrB,EAAQoB,GAER,IAAId,EAAQ,EACZc,EAAOE,MAAMC,SAASC,IACS,QAAzBA,EAAKC,iBACPnB,GACF,IAGFC,EAASD,EACX,CAAE,MAAOF,GACPC,EAASD,EAAMsB,QACjB,CAAC,QACCvB,GAAW,EACb,GAGFwB,EAAW,GACV,IAECzB,EAAgB0B,cAAA,KAAAC,SAAG,eACnBzB,EAAc0B,eAAA,KAAAD,SAAA,CAAG,UAAQzB,KAG3B0B,eAAA,OAAAD,SAAA,CACED,cAAA,MAAAC,SAAI,kBACJC,eAAA,KAAAD,SAAA,CAAG,6CAA2CvB,KAC9CsB,cAAA,OAAAC,SAAME,KAAKC,UAAUjC,EAAM,KAAM,OAC7B,EC7CKkC,MATHA,IAERH,eAAA,OAAKI,UAAU,MAAKL,SAAA,CAClBD,cAAA,MAAAC,SAAI,iBACJD,cAAC9B,EAAS,OCIDqC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,ECHWS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHrB,cAACsB,IAAMC,WAAU,CAAAtB,SACfD,cAACK,EAAG,OAORE,G","file":"static/js/main.96874b2c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// src/FetchData.js\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst FetchData = () => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const apiEndpoint =\r\n        \"https://cors-anywhere.herokuapp.com/https://aincansocall.database.cz/api/v1/dialer/predictive/items?campaign_id=69&limit=100&dialer_agent_id=266&end_date=19.07.2024\";\r\n      const token = \"svpat-HJpFpRRrxBvZQkVc1whfmZGWMcoXX25yk1xeMkxO\";\r\n\r\n      try {\r\n        const response = await fetch(apiEndpoint, {\r\n          method: \"GET\",\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          mode: \"cors\", // Přidáno\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        const result = await response.json();\r\n        setData(result);\r\n\r\n        let count = 0;\r\n        result.items.forEach((item) => {\r\n          if (item.dialer_agent_id === \"266\") {\r\n            count++;\r\n          }\r\n        });\r\n\r\n        setCount(count);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error: {error}</p>;\r\n\r\n  return (\r\n    <div>\r\n      <h1>Data from API</h1>\r\n      <p>Number of items with dialer_agent_id 266: {count}</p>\r\n      <pre>{JSON.stringify(data, null, 2)}</pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FetchData;\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport FetchData from './FetchData';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>My React App</h1>\r\n      <FetchData />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}